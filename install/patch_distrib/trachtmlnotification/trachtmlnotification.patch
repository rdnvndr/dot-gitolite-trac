diff -cr 0.12/trachtmlnotification/notification.py 0.12-roand/trachtmlnotification/notification.py
*** 0.12/trachtmlnotification/notification.py	2015-01-22 10:56:13.000000000 +0300
--- 0.12-roand/trachtmlnotification/notification.py	2013-09-16 00:44:00.000000000 +0400
***************
*** 6,39 ****
  from email.MIMEText import MIMEText
  from email.MIMEMultipart import MIMEMultipart
  from genshi.builder import tag
- Locale = None
  try:
      from babel.core import Locale
  except ImportError:
!     pass
  
  from trac.core import Component, implements
  from trac.attachment import AttachmentModule
  from trac.env import Environment
  from trac.mimeview.api import Context
  from trac.notification import SmtpEmailSender, SendmailEmailSender
  from trac.resource import ResourceNotFound
- from trac.test import MockPerm
  from trac.ticket.model import Ticket
  from trac.ticket.web_ui import TicketModule
! from trac.timeline.web_ui import TimelineModule
! from trac.util.datefmt import get_timezone, localtz, to_utimestamp
  from trac.util.text import to_unicode
! from trac.util.translation import deactivate, make_activable, reactivate, tag_
  from trac.web.api import Request
  from trac.web.chrome import Chrome, ITemplateProvider
  from trac.web.main import FakeSession
  
- try:
-     from trac.notification.api import INotificationFormatter
- except ImportError:
-     INotificationFormatter = None
- 
  
  _TICKET_URI_RE = re.compile(r'/ticket/(?P<tktid>[0-9]+)'
                              r'(?:#comment:(?P<cnum>[0-9]+))?\Z')
--- 6,32 ----
  from email.MIMEText import MIMEText
  from email.MIMEMultipart import MIMEMultipart
  from genshi.builder import tag
  try:
      from babel.core import Locale
  except ImportError:
!     Locale = None
  
  from trac.core import Component, implements
  from trac.attachment import AttachmentModule
  from trac.env import Environment
  from trac.mimeview.api import Context
  from trac.notification import SmtpEmailSender, SendmailEmailSender
+ from trac.perm import PermissionCache
  from trac.resource import ResourceNotFound
  from trac.ticket.model import Ticket
  from trac.ticket.web_ui import TicketModule
! from trac.util.datefmt import get_timezone, localtz
  from trac.util.text import to_unicode
! from trac.util.translation import tag_, make_activable, deactivate
  from trac.web.api import Request
  from trac.web.chrome import Chrome, ITemplateProvider
  from trac.web.main import FakeSession
  
  
  _TICKET_URI_RE = re.compile(r'/ticket/(?P<tktid>[0-9]+)'
                              r'(?:#comment:(?P<cnum>[0-9]+))?\Z')
***************
*** 60,115 ****
  
  class HtmlNotificationModule(Component):
  
!     if INotificationFormatter:
!         implements(INotificationFormatter, ITemplateProvider)
!     else:
!         implements(ITemplateProvider)
! 
!     # INotificationFormatter methods
! 
!     def get_supported_styles(self, transport):
!         yield 'text/html', 'ticket'
! 
!     def format(self, transport, style, event):
!         if style != 'text/html' or event.realm != 'ticket':
!             return
!         chrome = Chrome(self.env)
!         req = self._create_request()
!         ticket = event.target
!         cnum = None
!         if event.time:
!             db = self.env.get_read_db()
!             cursor = db.cursor()
!             cursor.execute("""\
!                 SELECT field, oldvalue FROM ticket_change
!                 WHERE ticket=%s AND time=%s AND field='comment'
!                 """, (ticket.id, to_utimestamp(event.time)))
!             for field, oldvalue in cursor:
!                 if oldvalue:
!                     cnum = int(oldvalue.rsplit('.', 1)[-1])
!                     break
!         link = self.env.abs_href.ticket(ticket.id)
!         if cnum is not None:
!             link += '#comment:%d' % cnum
! 
!         try:
!             tx = deactivate()
!             try:
!                 make_activable(lambda: req.locale, self.env.path)
!                 content = self._create_html_body(chrome, req, ticket, cnum,
!                                                  link)
!             finally:
!                 reactivate(tx)
!         except:
!             self.log.warn('Caught exception while generating html part',
!                           exc_info=True)
!             raise
!         if isinstance(content, unicode):
!             # avoid UnicodeEncodeError from MIMEText()
!             content = content.encode('utf-8')
!         return content
! 
!     # ITemplateProvider methods
  
      def get_htdocs_dirs(self):
          return ()
--- 53,59 ----
  
  class HtmlNotificationModule(Component):
  
!     implements(ITemplateProvider)
  
      def get_htdocs_dirs(self):
          return ()
***************
*** 118,171 ****
          from pkg_resources import resource_filename
          return [resource_filename(__name__, 'templates')]
  
!     # public methods
! 
!     def substitute_message(self, message, ignore_exc=True):
          try:
              chrome = Chrome(self.env)
!             req = self._create_request()
!             tx = deactivate()
              try:
                  make_activable(lambda: req.locale, self.env.path)
                  return self._substitute_message(chrome, req, message)
              finally:
!                 reactivate(tx)
          except:
              self.log.warn('Caught exception while substituting message',
                            exc_info=True)
!             if ignore_exc:
!                 return message
!             raise
! 
!     # private methods
! 
!     def _create_request(self):
!         languages = filter(None, [self.config.get('trac', 'default_language')])
!         if languages:
!             locale = _parse_locale(languages[0])
!         else:
!             locale = None
!         tzname = self.config.get('trac', 'default_timezone')
!         tz = get_timezone(tzname) or localtz
!         environ = {'REQUEST_METHOD': 'POST', 'REMOTE_ADDR': '127.0.0.1',
!                    'SERVER_NAME': 'localhost', 'SERVER_PORT': '80',
!                    'wsgi.url_scheme': 'http',
!                    'trac.base_url': self.env.abs_href()}
!         if languages:
!             environ['HTTP_ACCEPT_LANGUAGE'] = ','.join(languages)
!         req = Request(environ, lambda *args, **kwargs: None)
          req.arg_list = ()
          req.args = {}
          req.authname = 'anonymous'
          req.session = FakeSession({'dateinfo': 'absolute'})
!         req.perm = MockPerm()
          req.href = req.abs_href
!         req.locale = locale
!         req.lc_time = locale
!         req.tz = tz
!         req.chrome = {'notices': [], 'warnings': []}
          return req
  
      def _substitute_message(self, chrome, req, message):
          parsed = email.message_from_string(message)
          link = parsed.get('X-Trac-Ticket-URL')
--- 62,109 ----
          from pkg_resources import resource_filename
          return [resource_filename(__name__, 'templates')]
  
!     def substitute_message(self, message):
          try:
              chrome = Chrome(self.env)
!             req = self._create_request(chrome)
              try:
                  make_activable(lambda: req.locale, self.env.path)
                  return self._substitute_message(chrome, req, message)
              finally:
!                 deactivate()
          except:
              self.log.warn('Caught exception while substituting message',
                            exc_info=True)
!             return message
! 
!     def _create_request(self, chrome):
!         req = Request({'REQUEST_METHOD': 'GET',
!                        'trac.base_url': self.env.abs_href(),
!                       },
!                       lambda *args, **kwargs: None)
          req.arg_list = ()
          req.args = {}
          req.authname = 'anonymous'
          req.session = FakeSession({'dateinfo': 'absolute'})
!         req.perm = PermissionCache(self.env, req.authname)
          req.href = req.abs_href
!         req.callbacks.update({
!             'chrome': chrome.prepare_request,
!             'tz': self._get_tz,
!             'locale': self._get_locale,
!             'lc_time': lambda req: 'iso8601',
!         })
! 
          return req
  
+     def _get_tz(self, req):
+         tzname = self.config.get('trac', 'default_timezone')
+         return get_timezone(tzname) or localtz
+ 
+     def _get_locale(self, req):
+         lang = self.config.get('trac', 'default_language')
+         return _parse_locale(lang)
+ 
      def _substitute_message(self, chrome, req, message):
          parsed = email.message_from_string(message)
          link = parsed.get('X-Trac-Ticket-URL')
***************
*** 216,238 ****
                                if change.get('cnum') == cnum]
          data['changes'] = changes
          context = Context.from_request(req, ticket.resource, absurls=True)
-         alist = attmod.attachment_data(context)
-         alist['can_create'] = False
          data.update({
                  'can_append': False,
                  'show_editor': False,
                  'start_time': ticket['changetime'],
                  'context': context,
!                 'alist': alist,
                  'styles': self._get_styles(chrome),
                  'link': tag.a(link, href=link),
                  'tag_': tag_,
                 })
!         template = 'htmlnotification_ticket.html'
!         # use pretty_dateinfo in TimelineModule
!         TimelineModule(self.env).post_process_request(req, template, data,
!                                                       None)
!         rendered = chrome.render_template(req, template, data, fragment=True)
          return unicode(rendered)
  
      def _get_styles(self, chrome):
--- 154,171 ----
                                if change.get('cnum') == cnum]
          data['changes'] = changes
          context = Context.from_request(req, ticket.resource, absurls=True)
          data.update({
                  'can_append': False,
                  'show_editor': False,
                  'start_time': ticket['changetime'],
                  'context': context,
!                 'alist': attmod.attachment_data(context),
                  'styles': self._get_styles(chrome),
                  'link': tag.a(link, href=link),
                  'tag_': tag_,
                 })
!         rendered = chrome.render_template(req, 'htmlnotification_ticket.html',
!                                           data, fragment=True)
          return unicode(rendered)
  
      def _get_styles(self, chrome):
***************
*** 282,297 ****
  class HtmlNotificationSmtpEmailSender(SmtpEmailSender):
  
      def send(self, from_addr, recipients, message):
!         if not INotificationFormatter:
!             mod = HtmlNotificationModule(self.env)
!             message = mod.substitute_message(message)
          SmtpEmailSender.send(self, from_addr, recipients, message)
  
  
  class HtmlNotificationSendmailEmailSender(SendmailEmailSender):
  
      def send(self, from_addr, recipients, message):
!         if not INotificationFormatter:
!             mod = HtmlNotificationModule(self.env)
!             message = mod.substitute_message(message)
          SendmailEmailSender.send(self, from_addr, recipients, message)
--- 215,228 ----
  class HtmlNotificationSmtpEmailSender(SmtpEmailSender):
  
      def send(self, from_addr, recipients, message):
!         mod = HtmlNotificationModule(self.env)
!         message = mod.substitute_message(message)
          SmtpEmailSender.send(self, from_addr, recipients, message)
  
  
  class HtmlNotificationSendmailEmailSender(SendmailEmailSender):
  
      def send(self, from_addr, recipients, message):
!         mod = HtmlNotificationModule(self.env)
!         message = mod.substitute_message(message)
          SendmailEmailSender.send(self, from_addr, recipients, message)
